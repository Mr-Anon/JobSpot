[{"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/index.js":"1","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/App.js":"2","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/layout/Navbar.js":"3","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/layout/Landing.js":"4","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/auth/Login.js":"5","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/store.js":"6","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/actions/authActions.js":"7","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/actions/types.js":"8","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/utils/setAuthToken.js":"9","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/reducers/index.js":"10","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/reducers/authReducer.js":"11","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/reducers/errorReducer.js":"12","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/private-route/PrivateRoute.js":"13","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/Dashboard.js":"14","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/layout/option.js":"15","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/auth/Register_app.js":"16","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/auth/Register_rec.js":"17","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/AddJob.js":"18","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/recJobs.js":"19","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/recprofile.js":"20","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/editrecprofile.js":"21","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/appprofile.js":"22","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/appJobs.js":"23","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/popup.js":"24","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/editappprofile.js":"25","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/MyApplication.js":"26","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/recjobinfo.js":"27","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/MyEmployees.js":"28"},{"size":158,"mtime":1610563585989,"results":"29","hashOfConfig":"30"},{"size":3549,"mtime":1611496031337,"results":"31","hashOfConfig":"30"},{"size":2585,"mtime":1610832406209,"results":"32","hashOfConfig":"30"},{"size":1549,"mtime":1611595534872,"results":"33","hashOfConfig":"30"},{"size":4227,"mtime":1611658040770,"results":"34","hashOfConfig":"30"},{"size":762,"mtime":1610716686481,"results":"35","hashOfConfig":"30"},{"size":3658,"mtime":1611587423381,"results":"36","hashOfConfig":"30"},{"size":135,"mtime":1610361710485,"results":"37","hashOfConfig":"30"},{"size":342,"mtime":1610361833491,"results":"38","hashOfConfig":"30"},{"size":206,"mtime":1610362101406,"results":"39","hashOfConfig":"30"},{"size":636,"mtime":1610365390410,"results":"40","hashOfConfig":"30"},{"size":287,"mtime":1610365469862,"results":"41","hashOfConfig":"30"},{"size":583,"mtime":1610807068875,"results":"42","hashOfConfig":"30"},{"size":5308,"mtime":1611595471050,"results":"43","hashOfConfig":"30"},{"size":1410,"mtime":1611595560287,"results":"44","hashOfConfig":"30"},{"size":12779,"mtime":1611662259605,"results":"45","hashOfConfig":"30"},{"size":6382,"mtime":1610832316273,"results":"46","hashOfConfig":"30"},{"size":8495,"mtime":1611602370881,"results":"47","hashOfConfig":"30"},{"size":12465,"mtime":1611665648856,"results":"48","hashOfConfig":"30"},{"size":2286,"mtime":1611142581038,"results":"49","hashOfConfig":"30"},{"size":6094,"mtime":1611142766585,"results":"50","hashOfConfig":"30"},{"size":3274,"mtime":1611660224254,"results":"51","hashOfConfig":"30"},{"size":26108,"mtime":1611611729687,"results":"52","hashOfConfig":"30"},{"size":973,"mtime":1611317374828,"results":"53","hashOfConfig":"30"},{"size":11620,"mtime":1611502973056,"results":"54","hashOfConfig":"30"},{"size":11425,"mtime":1611583641286,"results":"55","hashOfConfig":"30"},{"size":18391,"mtime":1611613109424,"results":"56","hashOfConfig":"30"},{"size":13646,"mtime":1611567526554,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1ljf9ct",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"60"},"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/index.js",[],["127","128"],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/App.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/layout/Navbar.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/layout/Landing.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/auth/Login.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/store.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/actions/authActions.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/actions/types.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/utils/setAuthToken.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/reducers/index.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/reducers/authReducer.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/reducers/errorReducer.js",[],["129","130"],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/private-route/PrivateRoute.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/Dashboard.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/layout/option.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/auth/Register_app.js",["131","132","133","134","135"],"import React, { Component, useState, Fragment } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { registerApp } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\n\n\n\n\n\nclass AppRegister extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      instituteName: [\"\"],\n      startYear: [\"\"],\n      endYear: [\"\"],\n      skills: [\"Python\", \"React\", \"Node.js\"],\n      resume: null,\n      image: null,\n      errors: {}\n    };\n    this.onChangeResume = this.onChangeResume.bind(this);\n    this.onChangeImage = this.onChangeImage.bind(this);\n  }\n  componentDidMount() {\n    // If logged in and user navigates to Register page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n    console.log(this.state);\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n  async onChangeResume(e) {\n    await this.setState({ resume: e.target.files[0] }) // accesing file\n    console.log(this.state.resume)\n    console.log(this.state.resume.type)\n  };\n  async onChangeImage(e) {\n    await this.setState({ image: e.target.files[0] }) // accesing file\n    console.log(this.state.image)\n  };\n  onSubmit = e => {\n    e.preventDefault();\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2,\n      instituteName: this.state.instituteName,\n      startYear: this.state.startYear,\n      endYear: this.state.endYear,\n      rating: '',\n      noOfRating: '',\n      totalRating: '',\n      // educations: this.state.educations,\n      skills: this.state.skills\n    }; this.props.registerApp(newUser, this.props.history);\n    if (this.state.email !== '' && this.state.resume !== null && this.state.image !==null ) {\n      if (this.state.resume.type !== \"application/pdf\" ) {\n        alert(\"resume must be a pdf file\")\n      }\n      else if(this.state.resume.size > 0) {\n        const formData = new FormData();\n        formData.append('resume', this.state.resume); // appending file\n        axios.post('api/applicant/uploadResume/' + this.state.email, formData)\n      }\n      if (this.state.image.type !== \"image/jpeg\") {\n        alert(\"Image must be a jpg Image\")\n      }\n      else if(this.state.image.size > 0) {\n      const formData1 = new FormData();\n      formData1.append('image', this.state.image); // appending file\n      axios.post('api/applicant/uploadImg/' + this.state.email, formData1)\n      }\n    }\n  };\n  SkillHandler(e, index) {\n    const values = [...this.state.skills];\n    values[index] = e.target.value;\n    this.setState({ skills: values });\n  }\n\n  addSkillRow = e => {\n    const values = [...this.state.skills];\n    console.log(values);\n    values.push(\n      \"\"\n    );\n    this.setState({ skills: values });\n  }\n  removeSkillRow = e => {\n    const values = [...this.state.skills];\n    values.splice(e, 1);\n    if (values.length == 0) {\n      values.push(\n        \"\"\n      );\n    }\n    this.setState({ skills: values });\n  }\n  educationNameHandler(e, index) {\n    const values = [...this.state.instituteName];\n    values[index] = e.target.value;\n    this.setState({ instituteName: values });\n  }\n  educationstartYearHandler(e, index) {\n    const values = [...this.state.startYear];\n    values[index] = e.target.value;\n    this.setState({ startYear: values });\n  }\n  educationendYearHandler(e, index) {\n    const values = [...this.state.endYear];\n    values[index] = e.target.value;\n    this.setState({ endYear: values });\n  }\n  addEducationRow = e => {\n    const values1 = [...this.state.instituteName];\n    console.log(values1);\n    values1.push(\n      \"\"\n\n    );\n    this.setState({ instituteName: values1 });\n    const values2 = [...this.state.startYear];\n    console.log(values2);\n    values2.push(\n      \"\"\n\n    );\n    this.setState({ startYear: values2 });\n    const values3 = [...this.state.endYear];\n    console.log(values3);\n    values3.push(\n      \"\"\n\n    );\n    this.setState({ endYear: values3 });\n  }\n  removeEducationRow = e => {\n    const values1 = [...this.state.instituteName];\n    const values2 = [...this.state.startYear];\n    const values3 = [...this.state.endYear];\n    values1.splice(e, 1);\n    values2.splice(e, 1);\n    values3.splice(e, 1);\n    if (values1.length == 0) {\n      values1.push({\n        instituteName: \"\",\n      });\n      values2.push({\n        startYear: \"\",\n      });\n      values3.push({\n        endYear: \"\",\n      });\n    }\n    this.setState({ instituteName: values1 });\n    this.setState({ startYear: values2 });\n    this.setState({ endYear: values3 });\n  }\n  render() {\n    const { errors } = this.state; return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col s8 offset-s2\">\n            <Link to=\"/\" className=\"btn-flat waves-effect\">\n              <i className=\"material-icons left\">keyboard_backspace</i> Back to\n              home\n            </Link>\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n              <h4>\n                <b>Register</b> below\n              </h4>\n              <p className=\"grey-text text-darken-1\">\n                Already have an account? <Link to=\"/login\">Log in</Link>\n              </p>\n            </div>\n            <form noValidate onSubmit={this.onSubmit}>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.name}\n                  error={errors.name}\n                  id=\"name\"\n                  type=\"text\"\n                  className={classnames(\"\", {\n                    invalid: errors.name\n                  })}\n                />\n                <label htmlFor=\"name\">Name</label>\n                <span className=\"red-text\">{errors.name}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.email}\n                  error={errors.email}\n                  id=\"email\"\n                  type=\"email\"\n                  className={classnames(\"\", {\n                    invalid: errors.email\n                  })}\n                />\n                <label htmlFor=\"email\">Email</label>\n                <span className=\"red-text\">{errors.email}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.password}\n                  error={errors.password}\n                  id=\"password\"\n                  type=\"password\"\n                  className={classnames(\"\", {\n                    invalid: errors.password\n                  })}\n                />\n                <label htmlFor=\"password\">Password</label>\n                <span className=\"red-text\">{errors.password}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.password2}\n                  error={errors.password2}\n                  id=\"password2\"\n                  type=\"password\"\n                  className={classnames(\"\", {\n                    invalid: errors.password2\n                  })}\n                />\n                <label htmlFor=\"password2\">Confirm Password</label>\n                <span className=\"red-text\">{errors.password2}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <h6 htmlFor=\"Skills\">Skills</h6>\n                {this.state.skills.map((inputField, index) => (\n                  <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                    <input\n                      onChange={event => this.SkillHandler(event, index)}\n                      value={inputField}\n                      error={errors.skills}\n                      id=\"skills\"\n                      type=\"text\"\n                      className={classnames(\"\", {\n                        invalid: errors.skills\n                      })}\n                    />\n                    <div style={{ width: \"25%\", marginRight: \"20%\" }}>\n                      <button type=\"button\" onClick={e => this.removeSkillRow(index)}>\n                        -\n                    </button>\n                      <button type=\"button\" onClick={e => this.addSkillRow(index)}>\n                        +\n                    </button>\n\n                    </div>\n\n                  </div>\n                ))}\n\n\n                <span className=\"red-text\">{errors.skills}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <h6 htmlFor=\"education\">education(Institue Name, Start Year,End Year)</h6>\n\n                {this.state.instituteName.map((inputField, index) => (\n                  <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                    <input\n                      onChange={event => this.educationNameHandler(event, index)}\n                      value={inputField}\n                      error={errors.instituteName}\n                      id=\"institueName\"\n                      type=\"text\"\n                      className={classnames(\"\", {\n                        invalid: errors.instituteName\n                      })}\n                    />\n                    <input\n                      onChange={event => this.educationstartYearHandler(event, index)}\n                      value={this.state.startYear[index]}\n                      error={errors.startYear}\n                      id=\"startYear\"\n                      type=\"Number\"\n                      className={classnames(\"\", {\n                        invalid: errors.startYear\n                      })}\n                    />\n\n                    <input\n                      onChange={event => this.educationendYearHandler(event, index)}\n                      value={this.state.endYear[index]}\n                      error={errors.endYear}\n                      id=\"endYear\"\n                      type=\"Number\"\n                      className={classnames(\"\", {\n                        invalid: errors.endYear\n                      })}\n                    />\n\n\n                    <div style={{ width: \"25%\", marginRight: \"20%\" }}>\n                      <button type=\"button\" onClick={e => this.removeEducationRow(index)}>\n                        -\n                      </button>\n                      <button type=\"button\" onClick={e => this.addEducationRow(index)}>\n                        +\n                      </button>\n\n                    </div>\n\n                  </div>\n                ))}\n\n\n                <span className=\"red-text\">{errors.education}</span>\n              </div>\n\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <h6>Upload Resume</h6>\n                <input\n                  onChange={this.onChangeResume}\n\n                  error={errors.instituteName}\n\n                  type=\"file\"\n\n                />\n              </div>\n              <br></br>\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <h6>Upload Image</h6>\n                <input\n                  onChange={this.onChangeImage}\n\n                  error={errors.instituteName}\n\n                  type=\"file\"\n\n                />\n              </div>\n              <br></br>\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <button\n                  style={{\n                    width: \"150px\",\n                    borderRadius: \"3px\",\n                    letterSpacing: \"1.5px\",\n                    marginTop: \"20px\"\n                  }}\n                  type=\"submit\"\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                >\n                  Sign up\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\nAppRegister.propTypes = {\n  registerApp: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(\n  mapStateToProps,\n  { registerApp }\n)(withRouter(AppRegister));","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/auth/Register_rec.js",["136"],"import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerRec } from \"../../actions/authActions\";\nimport TextField from '@material-ui/core/TextField';\n\n\nimport classnames from \"classnames\";\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      bio: \"\",\n      contactNumber: \"\",\n      errors: {}\n    };\n  }\n  componentDidMount() {\n    // If logged in and user navigates to Register page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n  onSubmit = e => {\n    e.preventDefault();\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2,\n      contactNumber: this.state.contactNumber,\n      bio: this.state.bio\n      \n    };this.props.registerRec(newUser, this.props.history); \n  };\n  render() {\n    const { errors } = this.state;return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col s8 offset-s2\">\n            <Link to=\"/\" className=\"btn-flat waves-effect\">\n              <i className=\"material-icons left\">keyboard_backspace</i> Back to\n              home\n            </Link>\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n              <h4>\n                <b>Register</b> below\n              </h4>\n              <p className=\"grey-text text-darken-1\">\n                Already have an account? <Link to=\"/login\">Log in</Link>\n              </p>\n            </div>\n            <form noValidate onSubmit={this.onSubmit}>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.name}\n                  error={errors.name}\n                  id=\"name\"\n                  type=\"text\"\n                  className={classnames(\"\", {\n                    invalid: errors.name\n                  })}\n                />\n                <label htmlFor=\"name\">Name</label>\n                <span className=\"red-text\">{errors.name}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.email}\n                  error={errors.email}\n                  id=\"email\"\n                  type=\"email\"\n                  className={classnames(\"\", {\n                    invalid: errors.email\n                  })}\n                />\n                <label htmlFor=\"email\">Email</label>\n                <span className=\"red-text\">{errors.email}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.password}\n                  error={errors.password}\n                  id=\"password\"\n                  type=\"password\"\n                  className={classnames(\"\", {\n                    invalid: errors.password\n                  })}\n                />\n                <label htmlFor=\"password\">Password</label>\n                <span className=\"red-text\">{errors.password}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.password2}\n                  error={errors.password2}\n                  id=\"password2\"\n                  type=\"password\"\n                  className={classnames(\"\", {\n                    invalid: errors.password2\n                  })}\n                />\n                <label htmlFor=\"password2\">Confirm Password</label>\n                <span className=\"red-text\">{errors.password2}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.contactNumber}\n                  error={errors.contactNumber}\n                  id=\"contactNumber\"\n                  type=\"Number\"\n                  className={classnames(\"\", {\n                    invalid: errors.contactNumber\n                  })}\n                />\n                <label htmlFor=\"contactNumber\">Contact Number</label>\n                <span className=\"red-text\">{errors.contactNumber}</span>\n              </div>\n              <div className=\"col s12\">\n              <TextField\n                  id=\"bio\"\n                  label=\"Bio\"\n                  fullWidth\n                  multiline\n                  rows={4}\n                  defaultValue=\"\"\n                  variant=\"outlined\"\n                  onChange={this.onChange}\n                  value={this.state.bio}\n                  error={errors.bio}\n                  id=\"bio\"\n                  type=\"text\"\n                  className={classnames(\"\", {\n                    invalid: errors.bio\n                  })}\n        />\n\n                <span className=\"red-text\">{errors.bio}</span>\n              </div>\n             \n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <button\n                  style={{\n                    width: \"150px\",\n                    borderRadius: \"3px\",\n                    letterSpacing: \"1.5px\",\n                    marginTop: \"1rem\"\n                  }}\n                  type=\"submit\"\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                >\n                  Sign up\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n \n}Register.propTypes = {\n  registerRec: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(\n  mapStateToProps,\n  { registerRec }\n)(withRouter(Register));","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/AddJob.js",["137","138"],"import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { addJob } from \"../../actions/authActions\";\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport DateTimePicker from 'react-datetime-picker';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport 'date-fns';\n\n\n\nimport classnames from \"classnames\";\n\n//const {user} = this.prop.auth;\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\n// const classes = useStyles();\n\nclass Register extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      jobName: \"\",\n      skillReq: \"\",\n      recId: \"\",\n      recName: \"\",\n      type: \"\",\n      salary: \"\",\n      duration: \"\",\n      deadline: \"\",\n      numOfPositions: \"\",\n      maxApp: \"\",\n      rating: \"0\",\n      errors: {}\n    };\n  }\n  componentDidMount() {\n    // If logged in and user navigates to Register page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/addjob\");\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  onClickradio = e => {\n    this.setState({ type: e.target.value });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    const { user } = this.props.auth;\n    const newJob = {\n      jobName: this.state.jobName,\n      skillReq: this.state.skillReq,\n      recId: user.id,\n      recName: user.name,\n      appliApp: this.state.appliApp,\n      salary: this.state.salary,\n      type: this.state.type,\n      duration: this.state.duration,\n      deadline: this.state.deadline,\n      numOfPositions: this.state.numOfPositions,\n      maxApp: this.state.maxApp,\n      rating: '0',\n      noOfRating: '0',\n      totalRating: '0',\n      status: '',\n      color: '',\n      numberOfApp: ''\n\n    };\n    console.log(newJob);\n    this.props.addJob(newJob, this.props.history);\n  };\n  render() {\n\n    const { errors } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col s8 offset-s2\">\n            <Link to=\"/dashboard\" className=\"btn-flat waves-effect\">\n              <i className=\"material-icons left\">keyboard_backspace</i> Back to\n              home\n            </Link>\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n              <h4>\n                <b>Add Job</b> below\n              </h4>\n            </div>\n            <div>\n\n            </div>\n            <form noValidate onSubmit={this.onSubmit}>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.name}\n                  error={errors.name}\n                  id=\"jobName\"\n                  type=\"text\"\n                  className={classnames(\"\", {\n                    invalid: errors.jobName\n                  })}\n                />\n                <label htmlFor=\"jobName\">Name</label>\n                <span className=\"red-text\">{errors.jobName}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.email}\n                  error={errors.email}\n                  id=\"skillReq\"\n                  type=\"text\"\n                  className={classnames(\"\", {\n                    invalid: errors.skillReq\n                  })}\n                />\n                <label htmlFor=\"skillReq\">skillReq</label>\n                <span className=\"red-text\">{errors.skillReq}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.salary}\n                  error={errors.salary}\n                  id=\"salary\"\n                  type=\"text\"\n                  className={classnames(\"\", {\n                    invalid: errors.salary\n                  })}\n                />\n                <label htmlFor=\"salary\">salary</label>\n                <span className=\"red-text\">{errors.salary}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <RadioGroup aria-label=\"Type\" id=\"type\" onClick={this.onClickradio}\n                  value={this.state.type}\n                  error={errors.type}>\n                  <FormControlLabel id=\"type\" value=\"WorkFromHome\" control={<Radio />} label=\"WorkFromHome\" />\n                  <FormControlLabel id=\"type\" value=\"Part-Time\" control={<Radio />} label=\"Part-Time\" />\n                  <FormControlLabel id=\"type\" value=\"Full-Time\" control={<Radio />} label=\"Full-Time\" />\n                </RadioGroup>\n                <span className=\"red-text\">{errors.type}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.duration}\n                  error={errors.duration}\n                  id=\"duration\"\n                  type=\"text\"\n                  className={classnames(\"\", {\n                    invalid: errors.duration\n                  })}\n                />\n                <label htmlFor=\"duration\">Duration</label>\n                <span className=\"red-text\">{errors.duration}</span>\n              </div>\n              <div className=\"col s12\">\n                <TextField\n                  id=\"deadline\"\n                  label=\"Deadline\"\n                  type=\"datetime-local\"\n                  active\n                  value={this.state.deadline}\n                  onChange={this.onChange}\n\n\n                />\n                {/* <DateTimePicker\n                  id=\"deadline\"\n                  label=\"Deadline\"\n                  type=\"date\"\n\n                  value={this.state.deadline}\n                  onChange={this.onChange}\n                /> */}\n                <span className=\"red-text\">{errors.deadline}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.numOfPositions}\n                  error={errors.numOfPositions}\n                  id=\"numOfPositions\"\n                  type=\"Number\"\n                  className={classnames(\"\", {\n                    invalid: errors.numOfPositions\n                  })}\n                />\n                <label htmlFor=\"numOfPositions\">Number of Position</label>\n                <span className=\"red-text\">{errors.deadline}</span>\n                <span className=\"red-text\">{errors.numOfPositions}</span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.maxApp}\n                  error={errors.maxApp}\n                  id=\"maxApp\"\n                  type=\"Number\"\n                  className={classnames(\"\", {\n                    invalid: errors.maxApp\n                  })}\n                />\n                <label htmlFor=\"maxApp\">Number of Applications</label>\n                <span className=\"red-text\">{errors.maxApp}</span>\n              </div>\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <button\n                  style={{\n                    width: \"150px\",\n                    borderRadius: \"3px\",\n                    letterSpacing: \"1.5px\",\n                    marginTop: \"1rem\"\n                  }}\n                  type=\"submit\"\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                >\n                  Add Job\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n} Register.propTypes = {\n  addJob: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(\n  mapStateToProps,\n  { addJob }\n)(withRouter(Register));","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/recJobs.js",["139","140","141","142","143","144","145","146","147","148","149"],"\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { Link } from \"react-router-dom\";\n\nclass JobsList extends Component {\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            jobs: [],\n            sortedjobs: [],\n            sortName: true,\n            deadline: \"\",\n            maxApp: \"\",\n            numOfPositions: \"\"\n        };\n\n    }\n\n    async componentDidMount() {\n        const user = this.props.auth.user;\n        console.log(user.id);\n        const data = {\n            recId: user.id,\n        }\n        var curr_app = []\n        var acc_app = []\n        await axios.post('api/recruiter/getjobs', data)\n            .then(async response => {\n                console.log(response);\n                this.setState({ jobs: response.data, sortedjobs: response.data, searchText: '' });\n                for (var i = 0; i < this.state.jobs.length; ++i) {\n                    const data1 = {\n\n                        jobId: this.state.jobs[i]._id\n                    }\n                    await axios.post('api/application/getjobapp', data1)\n                        .then(response => {\n                            console.log(response)\n                            curr_app.push(response.data.length)\n                            var accepted_app = 0;\n                            for (var j = 0; j < response.data.length; ++j) {\n                                if (response.data[j].status === \"Accepted\") {\n                                    accepted_app++;\n                                }\n                            }\n                            acc_app.push(accepted_app)\n                        })\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n                //  console.log(\"errorrrr\");\n            })\n\n        var jobdata = this.state.jobs\n        for (var i = 0; i < jobdata.length; ++i) {\n            jobdata[i].numberOfApp = curr_app[i];\n            jobdata[i].noOfAccepted = acc_app[i];\n        }\n        console.log(jobdata)\n        var activejobdata = []\n        for (var i = 0; i < jobdata.length; ++i) {\n            if (jobdata[i].numOfPositions > jobdata[i].noOfAccepted) {\n                activejobdata.push(jobdata[i])\n            }\n        }\n        console.log(activejobdata)\n\n        await this.setState({\n            jobs: activejobdata\n        })\n    }\n\n    delete(id) {\n        const data = {\n            jobId: id,\n        }\n        axios.post('/api/recruiter/deletejob', data)\n            .then(response => {\n                console.log(response)\n                alert(\"Job Deleted\")\n            });\n        axios.post('/api/recruiter/deleteapplication', data)\n            .then(response => {\n                console.log(response)\n                this.componentDidMount()\n            });\n\n    }\n    async edit(id) {\n        if (this.state.deadline.length > 0 && this.state.maxApp.length > 0 && this.state.numOfPositions.length > 0) {\n            if (this.state.maxApp < this.state.numOfPositions ||this.state.maxApp<0 ||this.state.numOfPositions<0 ) {\n                alert(\"Invaild input\")\n                this.componentDidMount()\n            } else {\n               \n\n                const data = {\n                    jobId: id,\n                    maxApp: this.state.maxApp,\n                    numOfPositions: this.state.numOfPositions,\n                    deadline: this.state.deadline\n\n                }\n                await axios.post('api/recruiter/editjob', data)\n                    .then(response => {\n                        console.log(response)\n                        this.componentDidMount()\n                        // this.setState({\n                        //     maxApp: response.data[0].maxApp,\n                        //     numOfPositions: response.data[0].numOfPositions,\n                        //     deadline: response.data[0].deadline\n                        // })\n                    })\n            }\n        }\n    }\n\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n\n    info(id) {\n        localStorage.setItem(\"infojobId\", id);\n        window.location = \"/recjobinfo\"\n    }\n\n\n\n    render() {\n        return (\n            <div >\n\n                <Grid container className=\"white\">\n                    <input\n                        //   onChange={this.onChange}\n                        value={this.state.maxApp}\n                        //   error={errors.maxApp}\n                        id=\"maxApp\"\n                        onChange={this.onChange}\n                        type=\"Number\"\n                    //   className={classnames(\"\", {\n                    //     invalid: errors.maxApp\n                    //   })}\n                    /> <input\n                        // onChange={this.onChange}\n\n                        value={this.state.numOfPositions}\n                        // error={errors.numOfPositions}\n                        id=\"numOfPositions\"\n                        onChange={this.onChange}\n                        type=\"Number\"\n                    // className={classnames(\"\", {\n                    //   invalid: errors.numOfPositions\n                    // })}\n                    /> <TextField\n                        id=\"deadline\"\n\n                        type=\"datetime-local\"\n                        onChange={this.onChange}\n                        value={this.state.deadline}\n                    //   onChange={this.onChange}\n\n\n                    />\n\n                    <Grid item xs={12} md={9} lg={12}>\n                        <Paper>\n                            <Table size=\"medium\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell> Sr No.</TableCell>\n                                        <TableCell> Job Name</TableCell>\n                                        <TableCell>Skills</TableCell>\n                                        <TableCell>No. of Applications</TableCell>\n                                        <TableCell> Creation Date(GTM)</TableCell>\n                                        <TableCell> Deadline(GTM)</TableCell>\n                                        <TableCell>Maximum Applications</TableCell>\n                                        <TableCell>No. of Positions</TableCell>\n                                        <TableCell>No. of Positions Remaining</TableCell>\n                                        <TableCell>Salary</TableCell>\n                                        <TableCell>Duration</TableCell>\n                                        <TableCell>Type</TableCell>\n                                        <TableCell></TableCell>\n                                        <TableCell></TableCell>\n                                        <TableCell></TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        this.state.jobs.map((job, ind) => (\n                                            <TableRow key={ind}>\n                                                <TableCell>{ind}</TableCell>\n                                                <TableCell>{job.jobName}</TableCell>\n                                                <TableCell>{job.skillReq}</TableCell>\n                                                <TableCell>{job.numberOfApp}</TableCell>\n                                                <TableCell>{job.joinDate.split(\"T\")[0]}</TableCell>\n                                                <TableCell>{job.deadline.split(\"T\")[0]} {job.deadline.split(\"T\")[1].split(\".\")[0]}</TableCell>\n                                                <TableCell>{job.maxApp}</TableCell>\n                                                <TableCell>{job.numOfPositions}</TableCell>\n                                                <TableCell>{job.numOfPositions - job.noOfAccepted}</TableCell>\n                                                <TableCell>{job.salary.toFixed(2)}</TableCell>\n                                                <TableCell>{job.duration}</TableCell>\n                                                <TableCell>{job.type}</TableCell>\n                                                <TableCell><Link\n                                                    onClick={() => this.info(job._id)}\n                                                    to=\"/dashboard\"\n                                                    style={{\n                                                        width: \"80px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"btn blue \"\n                                                >\n\n                                                    info\n              </Link></TableCell>\n                                                <TableCell><button\n                                                    onClick={() => this.delete(job._id)}\n                                                    style={{\n                                                        width: \"80px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"red btn\"\n                                                // className=\"btn blue\"\n                                                >\n\n                                                    delete\n                                                </button></TableCell>\n                                                <TableCell><button\n                                                    onClick={() => this.edit(job._id)}\n                                                    style={{\n                                                        width: \"80px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"green btn\"\n                                                // className=\"btn blue\"\n                                                >\n\n                                                    edit\n                                                </button></TableCell>\n                                            </TableRow>\n                                        ))\n                                    }\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nJobsList.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(\n    mapStateToProps,\n    { logoutUser }\n)(JobsList);\n","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/recprofile.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/editrecprofile.js",["150","151","152","153"],"import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser} from \"../../actions/authActions\";\nimport { upRecPro} from \"../../actions/authActions\";\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\n\n\n\nimport classnames from \"classnames\";\n\n\nvar user;\nclass EditRecruiterProfile extends Component {\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n    constructor() {\n        \n        super();\n        this.state = {\n            name: \"\",\n            bio: \"\",\n            contactNumber: \"\",\n            recId: \"\",\n            errors: {}\n        };\n    }\n    componentDidMount() {\n\n        const user = this.props.auth.user;\n        console.log(user.id);\n        const data = {\n            recId: user.id,\n        }\n        axios.post('api/recruiter/getprofile', data)\n        .then(response => {\n            console.log(response);\n            this.setState({\n                name: response.data[0].name,\n                contactNumber: response.data[0].contactNumber,\n                bio: response.data[0].bio\n    \n            })\n        })\n        if (this.props.auth.isAuthenticated) {\n            this.props.history.push(\"/editrecprofile\");\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n    onSubmit = e => {\n        const {user} = this.props.auth\n        e.preventDefault();\n        const updatedUser = {\n            name: this.state.name,\n            contactNumber: this.state.contactNumber,\n            bio: this.state.bio,\n            recId: user.id\n\n        }; \n        console.log(updatedUser)\n        this.props.upRecPro(updatedUser, this.props.history);\n    };\n    render() {\n        const { errors } = this.state; \n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col s8 offset-s2\">\n                        <form noValidate onSubmit={this.onSubmit}>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.name}\n                                    error={errors.name}\n                                    id=\"name\"\n                                    type=\"text\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.name\n                                    })}\n                                />\n                                <label htmlFor=\"name\">Name</label>\n                                <span className=\"red-text\">{errors.name}</span>\n                            </div>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.contactNumber}\n                                    error={errors.contactNumber}\n                                    id=\"contactNumber\"\n                                    type=\"text\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.contactNumber\n                                    })}\n                                />\n                                <label htmlFor=\"contactNumber\">Contact Number</label>\n                                <span className=\"red-text\">{errors.contactNumber}</span>\n                            </div>\n                            <div className=\"col s12\">\n                                <TextField\n                                    id=\"bio\"\n                                    label=\"Bio\"\n                                    fullWidth\n                                    multiline\n                                    rows={4}\n                                    defaultValue=\"\"\n                                    variant=\"outlined\"\n                                    onChange={this.onChange}\n                                    value={this.state.bio}\n                                    error={errors.bio}\n                                    id=\"bio\"\n                                    type=\"text\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.bio\n                                    })}\n                                />\n\n                                <span className=\"red-text\">{errors.bio}</span>\n                            </div>\n\n                            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                                <button\n                                    style={{\n                                        width: \"150px\",\n                                        borderRadius: \"3px\",\n                                        letterSpacing: \"1.5px\",\n                                        marginTop: \"1rem\"\n                                    }}\n                                    type=\"submit\"\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                                >\n                                    Update\n                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n} EditRecruiterProfile.propTypes = {\n    upRecPro: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\nexport default connect(\n    mapStateToProps,\n    { upRecPro }\n)(withRouter(EditRecruiterProfile));","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/appprofile.js",["154"],"import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport axios from 'axios';\n\nclass Appilcantprofile extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            name: \"\",\n            email: \"\",\n            skills: \"\",\n            education: \"\",\n            errors: {}\n        };\n    }\n\n    componentDidMount() {\n\n        const user = this.props.auth.user;\n        console.log(user.id);\n        const data = {\n            appId: user.id,\n        }\n        axios.post('api/applicant/getprofile', data)\n            .then(response => {\n                console.log(response);\n                this.setState({\n                    name: response.data[0].name,\n                    email: response.data[0].email,\n                    instituteName: response.data[0].instituteName,\n                    startYear: response.data[0].startYear,\n                    endYear: response.data[0].endYear,\n                    skills: response.data[0].skills,\n                    rating: response.data[0].rating\n\n                })\n            })\n\n    }\n\n    getpp=e=>{\n       \n        window.open('http://localhost:5000/pp/'+this.state.email+'.jpeg');\n   \n    }\n    getresume=e=>{\n       \n        window.open('http://localhost:5000/resume/'+this.state.email+'.pdf');\n   \n    }\n\n\n    render() {\n        return (\n            <div className=\"container col s12 left-align\">\n\n\n                <br></br>\n                <div>\n                    <br></br>\n                    <img src={'http://localhost:5000/pp/'+this.state.email+'.jpeg'} style={{width : \"100px\", height: \"100px\"}}></img>\n                    {/* <button onClick={this.getpp}>Profile Pic</button> */}\n                    <h5>Name : {this.state.name}</h5><br></br>\n                    <h5>Email ID : {this.state.email}</h5><br></br>\n                    <h5>Education : <br></br>\n                       Institute Name: {this.state.instituteName}<br></br>\n                       Start Year: {this.state.startYear}<br></br>\n                       End Year: {this.state.endYear}<br></br>\n                    </h5><br></br>\n                    <h5>Skills : {this.state.skills}</h5><br></br>\n                    <h5>Rating: {this.state.rating}</h5><br></br>\n                    <button onClick={this.getresume}>Resume</button>\n\n                </div>\n                <Link\n                    to=\"/editappprofile\"\n                    style={{\n                        width: \"150px\",\n                        borderRadius: \"3px\",\n                        letterSpacing: \"1.5px\",\n                        marginTop: \"1rem\",\n                        marginRight: \"10px\"\n                    }}\n                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                >\n                    Edit\n            </Link>\n            </div>\n        )\n    }\n}\n\nAppilcantprofile.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(\n    mapStateToProps,\n    { logoutUser }\n)(Appilcantprofile);","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/appJobs.js",["155","156","157","158","159","160","161","162","163","164","165","166","167"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Fuse from 'fuse.js';\n\n\n\n\n\nclass JobsList extends Component {\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n\n    constructor(props) {\n        super(props);\n        this.customFunction = this.customFunction.bind(this);\n        this.onChangetype = this.onChangetype.bind(this);\n        this.onChangeduration = this.onChangeduration.bind(this);\n        this.onChangesalarymin = this.onChangesalarymin.bind(this);\n        this.onChangesalarymax = this.onChangesalarymax.bind(this);\n        this.sortChangeDeadline = this.sortChangeDeadline.bind(this);\n        this.renderIconDeadline = this.renderIconDeadline.bind(this);\n        this.sortChangeRating = this.sortChangeRating.bind(this);\n        this.renderIconRating = this.renderIconRating.bind(this);\n        this.sortChangeSalary = this.sortChangeSalary.bind(this);\n        this.renderIconSalary = this.renderIconSalary.bind(this);\n        this.sortChangeDuration = this.sortChangeDuration.bind(this);\n        this.renderIconDuration = this.renderIconDuration.bind(this);\n        this.state = {\n            jobs: [],\n            filterDuration: true,\n            ogjobs: [],\n            sortSalary: true,\n            types: [],\n            sortDuration: true,\n            sortRating: true,\n            status: [],\n            maxsalary: 9999999,\n            sortDeadline: true,\n            minsalary: 0,\n            durations: [],\n            type: '',\n            className: [],\n            duration: '',\n            search: \"\",\n        };\n    }\n\n    async componentDidMount() {\n        var status1 = [], color = [];\n        await axios.post('api/applicant/getjobs')\n            .then(response => {\n                console.log(response);\n                this.setState({ jobs: response.data, ogjobs: response.data, searchText: '' });\n            })\n            .catch(function (error) {\n                console.log(error);\n                //  console.log(\"errorrrr\");\n            })\n\n\n        // status=this.state.job\n        for (var i = 0; i < this.state.jobs.length; ++i) {\n            const user = this.props.auth.user;\n            console.log(user.id);\n            const data = {\n                appId: user.id,\n                jobId: this.state.jobs[i]._id\n            }\n            var curr_sel = 0\n            var curr_app = 0\n            await axios.post('api/application/getjobapp', data)\n                .then(response => {\n                    console.log(response);\n                    for (var j = 0; j < response.data.length; j++) {\n                        if (response.data[j].status === \"Accepted\") {\n                            curr_sel++\n                        }\n                    }\n                    curr_app = response.data.length\n                    console.log(curr_app + \" \" + curr_sel)\n\n                })\n            await axios.post('api/application/getapp', data)\n                .then(response => {\n                    console.log(response);\n                    if (response.data.length === 0) {\n                        status1.push(\"Apply\");\n                        color.push(\"btn blue\");\n                    }\n                    else {\n                        // console.log(i)\n                        status1.push(response.data[0].status)\n                        color.push(\"btn green\");\n                    }\n                    if (status1[i] === \"Apply\" && (this.state.jobs[i].maxApp <= curr_app || this.state.jobs[i].numOfPositions <= curr_sel)) {\n                        status1[i] = \"Full\";\n                        color[i] = \"btn red\";\n                    }\n                })\n                .catch(function (error) {\n                    console.log(error);\n                    //  console.log(\"errorrrr\");\n                })\n\n\n        }\n\n        var temp = this.state.jobs\n\n        for (var i = 0; i < this.state.jobs.length; ++i) {\n            temp[i].status = status1[i]\n            temp[i].color = color[i]\n        }\n\n\n\n        await this.setState({\n            status: status1,\n            types: ['All', 'Full-Time', 'Part-Time', 'WorkFromHome'],\n            type: 'All',\n            durations: ['1', '2', '3', '4', '5', '6', '7'],\n            duration: '7',\n            minsalary: 0,\n            maxsalary: 99999999,\n            search: \"\",\n            ogjobs: temp,\n            jobs: temp,\n            className: color\n        })\n        console.log(\"lalalala\")\n\n        console.log(this.state.jobs)\n\n\n    }\n\n    async onChangeduration(e) {\n        await this.setState({\n            duration: e.target.value\n        });\n        console.log(this.state.duration);\n\n        var filteredJobs = [];\n        var i;\n        for (i = 0; i < this.state.ogjobs.length; ++i) {\n            if (this.state.ogjobs[i].duration < this.state.duration && this.state.ogjobs[i].duration != 0 && (this.state.ogjobs[i].type === this.state.type || this.state.type === \"All\") && (this.state.minsalary < Number(this.state.ogjobs[i].salary) && Number(this.state.ogjobs[i].salary) < this.state.maxsalary)) {\n                filteredJobs.push(this.state.ogjobs[i]);\n            }\n        }\n\n\n        var array = filteredJobs;\n\n        this.setState({\n            jobs: array,\n            search: '',\n\n        })\n    };\n    async apply(id, curStat, index) {\n        if (curStat === \"Apply\") {\n            var noofapplications = 0;\n            var isAccepted = false;\n            console.log(id);\n            const user = this.props.auth.user;\n            console.log(user.id);\n            const data = {\n                appId: user.id,\n\n            }\n            await axios.post('api/application/getone', data)\n                .then(response => {\n                    console.log(response);\n                    for (var i = 0; i < response.data.length; ++i) {\n                        if (response.data[i].status === \"Applied\") {\n                            noofapplications++\n                        }\n                        if (response.data[i].status === \"Accepted\") {\n                            isAccepted = true;\n                        }\n\n\n                    }\n                })\n                .catch(function (error) {\n                    console.log(error);\n                    //  console.log(\"errorrrr\");\n                })\n            console.log(noofapplications)\n            if (noofapplications < 10 && !isAccepted) {\n                var sop = prompt(\"S.O.P (max 250)\");\n                console.log(sop);\n                if (sop !== null) {\n                    if (sop.length > 0) {\n                        if (sop.split(\" \").length > 250) {\n                            alert(\"SOP must not be more than 250 words\");\n                        } else {\n                            const data = {\n                                jobId: id,\n\n                            }\n                            var recId;\n                            await axios.post('api/applicant/getjobwithid', data)\n                                .then(response => {\n                                    recId = response.data[0].recId\n                                    console.log(response.data[0].recId);\n                                })\n                            const user = this.props.auth.user;\n                            const Appdata = {\n                                jobId: id,\n                                recId: recId,\n                                appId: user.id,\n                                sop: sop,\n                                status: \"Applied\",\n                                dateOfApplication: Date.now(),\n                                name: user.name,\n                                skills: user.skills,\n                                joinDate: \"0000-01-01T00:00:00.173Z\",\n                                instituteName: user.instituteName,\n                                startYear: user.startYear,\n                                endYear: user.endYear,\n                                rating: '',\n                                nextStatus: '',\n                                jobName: this.state.jobs[index].jobName,\n                                type: this.state.jobs[index].type,\n                                appemail: user.email\n\n                            }\n                            console.log(\"zuzuzu\")\n                            console.log(Appdata)\n                            await axios.post('api/application/add', Appdata)\n                                .then(response => {\n                                    alert(\"Appiled Successfully\");\n                                    this.componentDidMount()\n                                })\n\n                        }\n                    } else {\n                        alert(\"SOP must not be empty\");\n                    }\n                } else {\n                    alert(\"SOP must not be empty\");\n                }\n            } else if (isAccepted) {\n                alert(\"You are already Accepted in a job!!\")\n            }\n            else {\n                alert(\"10 open Applications exists\")\n            }\n\n        }\n    };\n\n    async onChangetype(e) {\n        await this.setState({\n            type: e.target.value\n        });\n        console.log(this.state.type);\n        var filteredJobs = [];\n        var i;\n        for (i = 0; i < this.state.ogjobs.length; ++i) {\n            if ((this.state.ogjobs[i].type === this.state.type || this.state.type === 'All') && (this.state.ogjobs[i].duration < this.state.duration) && (this.state.minsalary < Number(this.state.ogjobs[i].salary) && Number(this.state.ogjobs[i].salary) < this.state.maxsalary)) {\n                filteredJobs.push(this.state.ogjobs[i]);\n            }\n\n        }\n        var array = filteredJobs;\n\n        this.setState({\n            jobs: array,\n            search: '',\n\n        })\n    };\n\n    async onChangesalarymin(e) {\n        await this.setState({\n            minsalary: e.target.value\n        });\n        console.log(this.state.minsalary);\n        var filteredJobs = [];\n        var i;\n        for (i = 0; i < this.state.ogjobs.length; ++i) {\n            if (isNaN(this.state.minsalary) == true) console.log(\"error\");\n            if ((this.state.ogjobs[i].type === this.state.type || this.state.type === 'All') && (this.state.ogjobs[i].duration < this.state.duration) && (this.state.minsalary < Number(this.state.ogjobs[i].salary) && Number(this.state.ogjobs[i].salary) < this.state.maxsalary)) {\n                filteredJobs.push(this.state.ogjobs[i]);\n            }\n\n        }\n        var array = filteredJobs;\n\n        this.setState({\n            jobs: array,\n            search: '',\n\n        })\n    };\n    async onChangesalarymax(e) {\n        \n        await this.setState({\n            maxsalary: e.target.value\n        });\n        console.log(this.state.maxsalary);\n        console.log(Number(this.state.ogjobs[0].salary))\n        var filteredJobs = [];\n        var i;\n        for (i = 0; i < this.state.ogjobs.length; ++i) {\n            // if (isNaN(this.state.minsalary)==true) console.log(\"error\");\n            if ((this.state.ogjobs[i].type === this.state.type || this.state.type === 'All') && (this.state.ogjobs[i].duration < this.state.duration) && (this.state.minsalary < Number(this.state.ogjobs[i].salary) && Number(this.state.ogjobs[i].salary) < this.state.maxsalary)) {\n                filteredJobs.push(this.state.ogjobs[i]);\n            }\n\n        }\n        var array = filteredJobs;\n\n        this.setState({\n            jobs: array,\n            search: '',\n        })\n    };\n    sortChangeDeadline() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.jobs;\n        var flag = this.state.sortDeadline;\n        array.sort(function (a, b) {\n            if (a.deadline != undefined && b.deadline != undefined) {\n                return (1 - flag * 2) * (new Date(a.deadline) - new Date(b.deadline));\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            jobs: array,\n            sortDeadline: !this.state.sortDeadline,\n        })\n    }\n\n    renderIconDeadline() {\n        // console.log(\"tusharBond\");\n        if (this.state.sortDeadline) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n    sortChangeRating() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.jobs;\n        var flag = this.state.sortRating;\n        array.sort(function (a, b) {\n            if (a.rating != undefined && b.rating != undefined) {\n                return (1 - flag * 2) * (a.rating - b.rating);\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            jobs: array,\n            sortRating: !this.state.sortRating,\n        })\n    }\n\n    renderIconRating() {\n        // console.log(\"tusharBond\");\n        if (this.state.sortRating) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n    sortChangeSalary() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.jobs;\n        var flag = this.state.sortSalary;\n        array.sort(function (a, b) {\n            if (a.salary != undefined && b.salary != undefined) {\n                return (1 - flag * 2) * (a.salary - b.salary);\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            jobs: array,\n            sortSalary: !this.state.sortSalary,\n        })\n    }\n    renderIconSalary() {\n        if (this.state.sortSalary) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n    sortChangeDuration() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.jobs;\n        var flag = this.state.sortDuration;\n        array.sort(function (a, b) {\n            if (a.duration != undefined && b.duration != undefined) {\n                return (1 - flag * 2) * (a.duration - b.duration);\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            jobs: array,\n            sortDuration: !this.state.sortDuration,\n        })\n    }\n\n    renderIconDuration() {\n        if (this.state.sortDuration) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n\n    async customFunction(e) {\n        await this.setState({\n            search: e.target.value\n        });\n\n        if (this.state.search === \"\") {\n            this.setState({\n                jobs: this.state.ogjobs,\n                duration: '7',\n                minsalary: 0,\n                maxsalary: 99999999,\n                type: 'All',\n\n            })\n\n        }\n        else {\n\n            const fuse = new Fuse(this.state.jobs, {\n                keys: [\n                    'jobName'\n                ],\n                includeScore: true\n            })\n\n            // console.log('fuse', fuse)\n            const results = fuse.search(this.state.search);\n            console.log(results);\n            this.setState({\n                jobs: results.map(result => result.item),\n\n            })\n        }\n    };\n\n\n\n\n    render() {\n\n        return (\n            <div >\n                <Grid container className=\"white\">\n                    <Grid item xs={12} md={3} lg={3}>\n\n                    </Grid>\n                    <Grid item xs={12} md={9} lg={9} className=\"white\">\n                        <List component=\"nav\" aria-label=\"mailbox folders\" className=\"white\">\n                            <input\n\n                                value={this.state.search}\n                                onChange={this.customFunction}\n                                id=\"search\"\n                                type=\"text\"\n\n                            />\n                        </List>\n                    </Grid>\n                </Grid>\n                <Grid container className=\"white\">\n                    <Grid item xs={12} md={3} lg={3}>\n                        <List component=\"nav\" aria-label=\"mailbox folders\">\n\n                            <ListItem button className=\"white\">\n                                <form noValidate autoComplete=\"off\" className=\"white\" >\n                                    <label>Min Salary</label>\n                                    <input\n\n                                        value={this.state.minsalary}\n                                        onChange={this.onChangesalarymin}\n                                        id=\"salaryMin\"\n                                        type=\"Number\"\n\n                                    />\n                                    <label>Max Salary</label>\n                                    <input\n\n                                        value={this.state.maxsalary}\n                                        onChange={this.onChangesalarymax}\n                                        id=\"salaryMax\"\n                                        type=\"Number\"\n\n                                    />\n                                </form>\n                            </ListItem>\n                            <Divider />\n                            {/* <ListItem button divider className=\"white\">\n                                <Autocomplete\n                                    id=\"combo-box-demo\"\n                                    options={this.state.jobs}\n                                    getOptionLabel={(option) => option.type}\n                                    style={{ width: 300 }}\n                                    renderInput={(params) => <TextField {...params} label=\"Select Type\" variant=\"outlined\" />}\n                                />\n\n                            </ListItem> */}\n                            <div className=\"form-group browser-default\">\n                                <label>Type of Job</label>\n                                <select ref=\"userInput\"\n                                    required\n                                    style={{ \"width\": \"50%\" }}\n                                    className=\"form-control browser-default\"\n                                    value={this.state.type}\n                                    onChange={this.onChangetype}\n                                >\n                                    {\n                                        this.state.types.map(function (type) {\n                                            return <option\n                                                key={type}\n                                                value={type}>{type}\n                                            </option>;\n                                        })\n                                    }\n                                </select>\n                            </div>\n                            <div className=\"form-group browser-default\">\n                                <label>Duration</label>\n                                <select ref=\"userInput\"\n                                    required\n                                    style={{ \"width\": \"50%\" }}\n                                    className=\"form-control browser-default\"\n                                    value={this.state.duration}\n                                    onChange={this.onChangeduration}\n                                >\n                                    {\n                                        this.state.durations.map(function (duration) {\n                                            return <option\n                                                key={duration}\n                                                value={duration}>{duration}\n                                            </option>;\n                                        })\n                                    }\n                                </select>\n                            </div>\n                        </List>\n                    </Grid>\n                    <Grid item xs={12} md={9} lg={9}>\n                        <Paper>\n                            <Table size=\"medium\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell> Sr No.</TableCell>\n                                        <TableCell> Job Name</TableCell>\n                                        <TableCell> Recuriter Name</TableCell>\n                                        <TableCell>Skills</TableCell>\n                                        <TableCell> <Button onClick={this.sortChangeDeadline}>{this.renderIconDeadline()}</Button>Deadline(GTM)</TableCell>\n                                        <TableCell>Maximum Applications</TableCell>\n                                        <TableCell>No. of Positions</TableCell>\n                                        <TableCell><Button onClick={this.sortChangeSalary}>{this.renderIconSalary()}</Button>Salary</TableCell>\n                                        <TableCell><Button onClick={this.sortChangeDuration}>{this.renderIconDuration()}</Button>Duration</TableCell>\n                                        <TableCell>Type</TableCell>\n                                        <TableCell><Button onClick={this.sortChangeRating}>{this.renderIconRating()}</Button>Rating</TableCell>\n                                        <TableCell></TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        this.state.jobs.map((job, ind) => (\n\n                                            <TableRow key={ind}>\n                                                <TableCell>{ind}</TableCell>\n                                                <TableCell>{job.jobName}</TableCell>\n                                                <TableCell>{job.recName}</TableCell>\n                                                <TableCell>{job.skillReq}</TableCell>\n                                                <TableCell>{job.deadline.split(\"T\")[0]} {job.deadline.split(\"T\")[1].split(\".\")[0]}</TableCell>\n                                                <TableCell>{job.maxApp}</TableCell>\n                                                <TableCell>{job.numOfPositions}</TableCell>\n                                                <TableCell>{job.salary}</TableCell>\n                                                <TableCell>{job.duration}</TableCell>\n                                                <TableCell>{job.type}</TableCell>\n                                                <TableCell>{job.rating.toFixed(2)}</TableCell>\n                                                <TableCell>\n                                                    <button\n                                                        onClick={() => this.apply(job._id, job.status, ind)}\n                                                        style={{\n                                                            width: \"120px\",\n                                                            borderRadius: \"1.5px\",\n                                                            letterSpacing: \".75px\"\n                                                        }}\n                                                        className={job.color}\n                                                    // className=\"btn blue\"\n                                                    >\n\n                                                        {job.status}\n                                                    </button>\n                                                    {/* {this.state.showPopup ?\n                                                        <Popup\n                                                            text='Click \"Close Button\" to hide popup'\n                                                            // closePopup={this.togglePopup.bind(this)}\n                                                        />\n                                                        : null\n                                                    } */}\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    }\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nJobsList.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(\n    mapStateToProps,\n    { logoutUser }\n)(JobsList);\n","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/popup.js",[],"/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/editappprofile.js",["168","169","170","171","172","173"],"import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport { upAppPro } from \"../../actions/authActions\";\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\n\n\n\nimport classnames from \"classnames\";\n\n\nvar user;\nclass EditRecruiterProfile extends Component {\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n    constructor() {\n\n        super();\n        this.state = {\n            name: \"\",\n            skills: [],\n            appId: \"\",\n            instituteName: [\"\"],\n            startYear: [\"\"],\n            endYear: [\"\"],\n            errors: {}\n        };\n    }\n    componentDidMount() {\n\n        const user = this.props.auth.user;\n        console.log(user.id);\n        const data = {\n            appId: user.id,\n        }\n        axios.post('api/applicant/getprofile', data)\n            .then(response => {\n                console.log(response);\n                this.setState({\n                    name: response.data[0].name,\n                    skills: response.data[0].skills,\n                    instituteName: response.data[0].instituteName,\n                    startYear: response.data[0].startYear,\n                    endYear: response.data[0].endYear\n\n\n                })\n            })\n        if (this.props.auth.isAuthenticated) {\n            this.props.history.push(\"/editappprofile\");\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n    onSubmit = e => {\n        const { user } = this.props.auth\n        e.preventDefault();\n        const updatedUser = {\n            name: this.state.name,\n            skills: this.state.skills,\n            appId: user.id,\n            instituteName: this.state.instituteName,\n            startYear: this.state.startYear,\n            endYear: this.state.endYear\n\n        };\n        console.log(updatedUser)\n        this.props.upAppPro(updatedUser, this.props.history);\n    };\n    SkillHandler(e, index) {\n        const values = [...this.state.skills];\n        values[index] = e.target.value;\n        this.setState({ skills: values });\n    }\n\n    addSkillRow = e => {\n        const values = [...this.state.skills];\n        console.log(values);\n        values.push(\n            \"\"\n        );\n        this.setState({ skills: values });\n    }\n    removeSkillRow = e => {\n        const values = [...this.state.skills];\n        values.splice(e, 1);\n        if (values.length == 0) {\n            values.push(\n                \"\"\n            );\n        }\n        this.setState({ skills: values });\n    }\n    educationNameHandler(e, index) {\n        const values = [...this.state.instituteName];\n        values[index] = e.target.value;\n        this.setState({ instituteName: values });\n    }\n    educationstartYearHandler(e, index) {\n        const values = [...this.state.startYear];\n        values[index] = e.target.value;\n        this.setState({ startYear: values });\n    }\n    educationendYearHandler(e, index) {\n        const values = [...this.state.endYear];\n        values[index] = e.target.value;\n        this.setState({ endYear: values });\n    }\n    addEducationRow = e => {\n        const values1 = [...this.state.instituteName];\n        console.log(values1);\n        values1.push(\n            \"\"\n\n        );\n        this.setState({ instituteName: values1 });\n        const values2 = [...this.state.startYear];\n        console.log(values2);\n        values2.push(\n            \"\"\n\n        );\n        this.setState({ startYear: values2 });\n        const values3 = [...this.state.endYear];\n        console.log(values3);\n        values3.push(\n            \"\"\n\n        );\n        this.setState({ endYear: values3 });\n    }\n    removeEducationRow = e => {\n        const values1 = [...this.state.instituteName];\n        const values2 = [...this.state.startYear];\n        const values3 = [...this.state.endYear];\n        values1.splice(e, 1);\n        values2.splice(e, 1);\n        values3.splice(e, 1);\n        if (values1.length == 0) {\n            values1.push({\n                instituteName: \"\",\n            });\n            values2.push({\n                startYear: \"\",\n            });\n            values3.push({\n                endYear: \"\",\n            });\n        }\n        this.setState({ instituteName: values1 });\n        this.setState({ startYear: values2 });\n        this.setState({ endYear: values3 });\n    }\n    render() {\n        const { errors } = this.state;\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col s8 offset-s2\">\n                        <form noValidate onSubmit={this.onSubmit}>\n                            <div className=\"input-field col s12\">\n                                <input\n                                    onChange={this.onChange}\n                                    value={this.state.name}\n                                    error={errors.name}\n                                    id=\"name\"\n                                    type=\"text\"\n                                    className={classnames(\"\", {\n                                        invalid: errors.name\n                                    })}\n                                />\n                                <label htmlFor=\"name\">Name</label>\n                                <span className=\"red-text\">{errors.name}</span>\n                            </div>\n                            <div className=\"input-field col s12\">\n                                <h6 htmlFor=\"Skills\">Skills</h6>\n                                {this.state.skills.map((inputField, index) => (\n                                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                                        <input\n                                            onChange={event => this.SkillHandler(event, index)}\n                                            value={inputField}\n                                            error={errors.skills}\n                                            id=\"skills\"\n                                            type=\"text\"\n                                            className={classnames(\"\", {\n                                                invalid: errors.skills\n                                            })}\n                                        />\n                                        <div style={{ width: \"25%\", marginRight: \"20%\" }}>\n                                            <button type=\"button\" onClick={e => this.removeSkillRow(index)}>\n                                                -\n                  </button>\n                                            <button type=\"button\" onClick={e => this.addSkillRow(index)}>\n                                                +\n                  </button>\n\n                                        </div>\n\n                                    </div>\n                                ))}\n\n\n                                <span className=\"red-text\">{errors.skills}</span>\n                            </div>\n\n                            <div className=\"input-field col s12\">\n                                <h6 htmlFor=\"education\">education</h6>\n\n                                {this.state.instituteName.map((inputField, index) => (\n                                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                                        <input\n                                            onChange={event => this.educationNameHandler(event, index)}\n                                            value={inputField}\n                                            error={errors.instituteName}\n                                            id=\"institueName\"\n                                            type=\"text\"\n                                            className={classnames(\"\", {\n                                                invalid: errors.instituteName\n                                            })}\n                                        />\n                                        <input\n                                            onChange={event => this.educationstartYearHandler(event, index)}\n                                            value={this.state.startYear[index]}\n                                            error={errors.startYear}\n                                            id=\"startYear\"\n                                            type=\"Number\"\n                                            className={classnames(\"\", {\n                                                invalid: errors.startYear\n                                            })}\n                                        />\n\n                                        <input\n                                            onChange={event => this.educationendYearHandler(event, index)}\n                                            value={this.state.endYear[index]}\n                                            error={errors.endYear}\n                                            id=\"endYear\"\n                                            type=\"Number\"\n                                            className={classnames(\"\", {\n                                                invalid: errors.endYear\n                                            })}\n                                        />\n\n\n                                        <div style={{ width: \"25%\", marginRight: \"20%\" }}>\n                                            <button type=\"button\" onClick={e => this.removeEducationRow(index)}>\n                                                -\n                      </button>\n                                            <button type=\"button\" onClick={e => this.addEducationRow(index)}>\n                                                +\n                      </button>\n\n                                        </div>\n\n                                    </div>\n                                ))}\n\n\n                                <span className=\"red-text\">{errors.education}</span>\n                            </div>\n\n\n\n                            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                                <button\n                                    style={{\n                                        width: \"150px\",\n                                        borderRadius: \"3px\",\n                                        letterSpacing: \"1.5px\",\n                                        marginTop: \"1rem\"\n                                    }}\n                                    type=\"submit\"\n                                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                                >\n                                    Update\n                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n} EditRecruiterProfile.propTypes = {\n    upAppPro: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\nexport default connect(\n    mapStateToProps,\n    { upAppPro }\n)(withRouter(EditRecruiterProfile));","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/MyApplication.js",["174","175","176","177","178","179","180","181","182","183","184","185","186","187","188"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { Link } from \"react-router-dom\";\nimport Fuse from 'fuse.js';\n\n\n\n\n\nclass JobsList extends Component {\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            application: [],\n            jobName: [],\n            recName: [],\n            salary: [],\n            rating: [],\n            joinDate: [],\n            showPopup: false,\n            ogapplication: [],\n            sortSalary: true,\n            sortDuration: true,\n            sortDeadline: true,\n            filterDuration: true,\n            types: [],\n            type: '',\n            status: [],\n\n        };\n\n\n\n    }\n\n    async componentDidMount() {\n        var temp1 = []\n        var temp2 = []\n        var temp3 = []\n        var temp4 = []\n        var temp5 = []\n        const user = this.props.auth.user;\n\n        const data = {\n            appId: user.id,\n        }\n        await axios.post('api/application/getone', data)\n            .then(async response => {\n                this.setState({ application: response.data, ogapplication: response.data, searchText: '' });\n                console.log(this.state.application)\n                for (var i = 0; i < response.data.length; ++i) {\n                    const data1 = {\n                        jobId: response.data[i].jobId,\n                    }\n                    await axios.post('api/applicant/getjobwithid', data1)\n                        .then(response1 => {\n                            console.log(response1)\n                            temp1.push(response1.data[0].jobName)\n                            temp2.push(response1.data[0].recName)\n                            temp3.push(response1.data[0].salary)\n                            temp4.push(response1.data[0].rating)\n                            temp5.push(response1.data[0].joinDate)\n                            this.setState({\n\n\n                                jobName: temp1,\n                                recName: temp2,\n                                salary: temp3,\n                                rating: temp4,\n                                joinDate: temp5\n\n\n                            })\n                        })\n\n                }\n\n            })\n            .catch(function (error) {\n                console.log(error);\n                //  console.log(\"errorrrr\");\n            })\n\n\n\n\n\n        // console.log(\"lalalala\")\n\n        // console.log(this.state.application)\n\n\n    }\n\n\n    async rate(id, status,index) {\n        console.log(\"Ok\");\n        console.log(id);\n        var rate, jobrating;\n\n        if (status === 'Accepted' && !this.state.application[index].appRate) {\n            var rate = prompt('Enter a rating (0-5)');\n\n            if (isNaN(rate) == true || rate < 0 || rate > 5) {\n                alert('Invalid rating');\n            }\n\n            else {\n                if (rate !== null) {\n                    if (rate.length > 0) {\n                        const data = {\n                            jobId: id,\n                        }\n                        await axios.post('/api/applicant/getjobwithid', data)\n                            .then(response => {\n                                // console.log(\"Asd\")\n                                // console.log(response.data[0]);\n                                // console.log(\"Asd\")\n                                // console.log(rat)\n                                jobrating = response.data[0];\n\n\n                                jobrating.totalRating = Number(jobrating.totalRating) + Number(rate);\n                                jobrating.noOfRating = Number(jobrating.noOfRating) + Number(1);\n                                console.log(jobrating.noOfRating)\n                                jobrating.rating = Number(jobrating.totalRating) / Number(jobrating.noOfRating);\n                                console.log(jobrating)\n                            })\n                        const data1 = {\n                            jobId: id,\n                            rating: jobrating.rating,\n                            noOfRating: jobrating.noOfRating,\n                            totalRating: jobrating.totalRating\n                        }\n\n                        await axios.post('/api/applicant/updatejobrating', data1)\n                            .then(res => (console.log(res.data)));\n\n                            console.log(this.state.application[index]._id)\n\n                            const data2 = {\n                                applicationId: this.state.application[index]._id,\n                                appRate: true\n                            }\n\n                        await axios.post('/api/application/updateapplicationappratestatus', data2)\n                            .then(res => (console.log(res.data)));\n\n                        this.componentDidMount();\n                    } else {\n                        alert('Invalid rating');\n                    }\n                } else {\n                    alert('Invalid rating');\n                }\n            }\n        }\n\n        else\n            alert(\"You can't rate this job!\");\n\n\n    };\n\n\n\n\n\n\n\n    render() {\n\n        return (\n            <div className=\"col s12 center-align\"  >\n\n                <Grid item xs={12} md={9} lg={12} >\n                    <Paper >\n                        <Table size=\"medium\" >\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell> Sr No.</TableCell>\n                                    <TableCell> Job Name</TableCell>\n                                    <TableCell> Recuriter Name</TableCell>\n\n\n                                    <TableCell>Salary</TableCell>\n                                    <TableCell>Date of Joining</TableCell>\n\n\n                                    <TableCell>Rating</TableCell>\n                                    <TableCell>Status</TableCell>\n                                    <TableCell>Rate</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    this.state.application.map((job, ind) => (\n\n                                        <TableRow key={ind}>\n                                            <TableCell>{ind}</TableCell>\n                                            <TableCell>{this.state.jobName[ind]}</TableCell>\n                                            <TableCell>{this.state.recName[ind]}</TableCell>\n\n\n\n\n                                            <TableCell>{this.state.salary[ind]}</TableCell>\n                                            <TableCell>{String(job.joinDate).split(\"T\")[0]}</TableCell>\n                                            <TableCell>{Number(this.state.rating[ind]).toFixed(2)}</TableCell>\n\n\n                                            <TableCell>\n                                                <button\n                                                    // onClick={() => this.rate(job._id, job.status)}\n                                                    style={{\n                                                        width: \"120px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"btn\"\n                                                // className=\"btn blue\"\n                                                >\n\n                                                    {job.status}\n                                                </button>\n                                                {/* {this.state.showPopup ?\n                                                        <Popup\n                                                            text='Click \"Close Button\" to hide popup'\n                                                            // closePopup={this.togglePopup.bind(this)}\n                                                        />\n                                                        : null\n                                                    } */}\n                                            </TableCell>\n                                            <TableCell>\n                                                <button\n                                                    onClick={() => this.rate(job.jobId, job.status,ind)}\n                                                    style={{\n                                                        width: \"120px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n\n                                                    className=\"btn blue\"\n                                                >\n\n                                                    rate\n                                                    </button>\n                                                {/* {this.state.showPopup ?\n                                                        <Popup\n                                                            text='Click \"Close Button\" to hide popup'\n                                                            // closePopup={this.togglePopup.bind(this)}\n                                                        />\n                                                        : null\n                                                    } */}\n                                            </TableCell>\n                                        </TableRow>\n                                    ))\n                                }\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n\n            </div>\n        )\n    }\n}\n\nJobsList.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(\n    mapStateToProps,\n    { logoutUser }\n)(JobsList);\n","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/recjobinfo.js",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216"],"\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { Link } from \"react-router-dom\";\n\nclass JobsList extends Component {\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            application: [],\n            sortedapplication: [],\n            sortName: true,\n            sortDateofApplication: true,\n            sortRating: true,\n            deadline: \"\",\n            maxApp: \"\",\n            numOfPositions: \"\",\n            app_acc: \"\",\n            email: []\n        };\n        this.renderIconName = this.renderIconName.bind(this);\n        this.renderIconDateofApplication = this.renderIconDateofApplication.bind(this);\n        this.renderIconRating = this.renderIconRating.bind(this);\n        this.sortChangeName = this.sortChangeName.bind(this);\n        this.sortChangeDateofApplication = this.sortChangeDateofApplication.bind(this);\n        this.sortChangeRating = this.sortChangeRating.bind(this);\n        this.reject = this.reject.bind(this);\n        this.download = this.download.bind(this);\n    }\n\n    async componentDidMount() {\n        const user = this.props.auth.user;\n        console.log(user.id);\n        const data = {\n            jobId: localStorage.getItem(\"infojobId\"),\n        }\n        var appdata = [];\n        var appemail= [];\n        var accepted = 0;\n        await axios.post('api/application/getjobappnonrejected', data)\n            .then(async response => {\n                console.log(response);\n                appdata.push(response.data)\n                console.log(appdata)\n                this.setState({ application: response.data, sortedapplication: response.data, searchText: '' });\n                for (var n = 0; n < response.data.length; ++n) {\n                    const dataApp = {\n                        appId: response.data[n].appId\n                    }\n                    console.log(dataApp)\n                    await axios.post('api/applicant/getprofile', dataApp)\n                        .then(async response1 => {\n                            console.log(response1)\n                            appemail.push(response1.data[0].email)\n                         })\n                    if (response.data[n].status === \"Accepted\") {\n                        accepted++\n                    }\n                }\n\n            })\n            .catch(function (error) {\n                console.log(error);\n                //  console.log(\"errorrrr\");\n            })\n\n        console.log(appemail);\n\n\n\n\n        appdata = this.state.application;\n        for (var i = 0; i < appdata.length; ++i) {\n            for (var j = 0; j < appdata[i].instituteName.length; ++j) {\n                appdata[i].instituteName[j] += ',  ' + \" \" + \" \";\n            }\n            for (var j = 0; j < appdata[i].skills.length; ++j) {\n                appdata[i].skills[j] += ',  ' + \" \" + \" \";\n            }\n            for (var j = 0; j < appdata[i].startYear.length; ++j) {\n                appdata[i].startYear[j] += ',  ' + \" \" + \" \";\n            }\n            for (var j = 0; j < appdata[i].endYear.length; ++j) {\n                appdata[i].endYear[j] += ',  ' + \" \" + \" \";\n            }\n        }\n        for (var i = 0; i < appdata.length; ++i) {\n            if (appdata[i].status == \"Applied\") {\n                appdata[i].nextStatus = \"Shortlist\"\n            }\n            if (appdata[i].status == \"Shortlisted\") {\n                appdata[i].nextStatus = \"Accept\"\n            }\n\n        }\n        console.log(appdata);\n        await this.setState({\n            application: appdata,\n            app_acc: accepted,\n            email: appemail\n        })\n        console.log(this.state.email)\n    }\n\n    download(appemail){\n        window.open('http://localhost:5000/resume/'+appemail+'.pdf');\n    }\n\n\n    sortChangeName() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.application;\n        var flag = this.state.sortName;\n        array.sort(function (a, b) {\n            if (a.name != undefined && b.name != undefined) {\n                var str1 = a.name;\n                var str2 = b.name;\n                var n = str1.localeCompare(str2);\n                return (1 - flag * 2) * n;\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            application: array,\n            sortName: !this.state.sortName,\n        })\n    }\n    sortChangeDateofApplication() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.application;\n        var flag = this.state.sortDateofApplication;\n        array.sort(function (a, b) {\n            if (a.dateOfApplication != undefined && b.dateOfApplication != undefined) {\n                return (1 - flag * 2) * (new Date(a.dateOfApplication) - new Date(b.dateOfApplication));\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            application: array,\n            sortDateofApplication: !this.state.sortDateofApplication,\n        })\n    }\n    async oneup(id, status, appId, index) {\n        if (status === \"Applied\") {\n            const data = {\n                applicationId: id,\n                status: \"Shortlisted\",\n                joinDate: '0000-01-01T00:00:00.173Z'\n            }\n            await axios.post(\"/api/application/updateapplication\", data)\n                .then(response => {\n                    console.log(\"shortlised\")\n                    this.componentDidMount()\n                })\n        } else if (status === \"Shortlisted\") {\n\n            const data = {\n                applicationId: id,\n                status: \"Accepted\",\n                joinDate: Date.now()\n\n            }\n            await axios.post(\"/api/application/updateapplication\", data)\n                .then(async response => {\n                    console.log(\"Accepted\")\n                    const info = {\n                        appName: this.state.application[index].name,\n                        jobName: this.state.application[index].jobName,\n                        recName: this.props.auth.user.name,\n                        appemail: this.state.application[index].appemail\n\n                    }\n                    console.log(info)\n                    console.log(index)\n                    axios.post(\"/api/applicant/sendmail\",info)\n\n                })\n            console.log(appId)\n            const data1 = {\n                appId: appId\n\n            }\n            await axios.post(\"/api/application/getappapp\", data1)\n                .then(async response => {\n                    console.log(response)\n                    for (var i = 0; i < response.data.length; ++i) {\n                        if (response.data[i].status !== \"Accepted\") {\n                            const data2 = {\n                                applicationId: response.data[i]._id,\n                                status: \"Rejected\",\n                                joinDate: '0000-01-01T00:00:00.173Z'\n\n                            }\n                            await axios.post(\"/api/application/updateapplication\", data2)\n                                .then(response => {\n                                    console.log(\"rest all rejected\")\n\n                                })\n\n                        }\n                    }\n\n                })\n            const data3 = {\n                jobId: localStorage.getItem(\"infojobId\"),\n            }\n            await axios.post('api/applicant/getjob', data3)\n                .then(async response => {\n                    if (this.state.app_acc + 1 >= response.data[0].numOfPositions) {\n                        await axios.post('api/application/getjobappnonrejected', data3)\n                            .then(response1 => {\n                                for (var n = 0; n < response1.data.length; ++n) {\n                                    if (response1.data[n].status !== \"Accepted\")\n                                        this.reject(response1.data[n]._id, response1.data[n].status)\n\n                                }\n                            })\n                    }\n\n                })\n            this.componentDidMount()\n\n        } else if (status === \"Rejected\") {\n            alert(\"Applicant is Rejected\")\n        } else if (status === \"Accepted\") {\n            alert(\"Applicant is Accepted\")\n\n        }\n\n    }\n\n    async reject(id, status) {\n        if (status !== \"Accepted\") {\n            if (status === \"Rejected\") {\n                alert(\"Applicant is Already Rejected\")\n\n            } else {\n                const data = {\n                    applicationId: id,\n                    status: \"Rejected\"\n                }\n                await axios.post(\"/api/application/updateapplication\", data)\n                    .then(response => {\n                        console.log(\"Rejected\")\n                        this.componentDidMount()\n                    })\n            }\n        } else {\n            alert(\"Applicant is Already Accepted\")\n        }\n\n    }\n    sortChangeRating() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.application;\n        var flag = this.state.sortRating;\n        array.sort(function (a, b) {\n            if (a.rating != undefined && b.rating != undefined) {\n                return (1 - flag * 2) * (a.rating - b.rating);\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            application: array,\n            sortRating: !this.state.sortRating,\n        })\n    }\n\n    renderIconName() {\n        if (this.state.sortName) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n    renderIconDateofApplication() {\n        if (this.state.sortDateofApplication) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n    renderIconRating() {\n        if (this.state.sortRating) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n\n\n\n\n\n    render() {\n        return (\n            <div >\n\n                <Grid container className=\"white\">\n\n\n                    <Grid item xs={12} md={9} lg={12}>\n                        <Paper>\n                            <Table size=\"medium\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell> Sr No.</TableCell>\n                                        <TableCell><Button onClick={this.sortChangeName}>{this.renderIconName()}</Button>Name</TableCell>\n                                        <TableCell>Skills</TableCell>\n\n                                        <TableCell><Button onClick={this.sortChangeDateofApplication}>{this.renderIconDateofApplication()}</Button>Date of Application</TableCell>\n                                        <TableCell>Institutes</TableCell>\n                                        <TableCell>Start</TableCell>\n                                        <TableCell>End</TableCell>\n                                        <TableCell>SOP</TableCell>\n                                        <TableCell><Button onClick={this.sortChangeRating}>{this.renderIconRating()}</Button>Rating</TableCell>\n                                        {/* <TableCell>Type</TableCell> */}\n                                        {/* <TableCell></TableCell> */}\n                                        {/* <TableCell></TableCell> */}\n                                        {/* <TableCell></TableCell> */}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        this.state.application.map((application, ind) => (\n                                            <TableRow key={ind}>\n                                                <TableCell>{ind}</TableCell>\n                                                <TableCell>{application.name}</TableCell>\n                                                <TableCell>{application.skills}</TableCell>\n\n                                                <TableCell>{application.dateOfApplication.split(\"T\")[0]} {application.dateOfApplication.split(\"T\")[1].split(\".\")[0]}</TableCell>\n                                                <TableCell>{application.instituteName}</TableCell>\n                                                <TableCell>{application.startYear}</TableCell>\n                                                <TableCell>{application.endYear}</TableCell>\n                                                <TableCell>{application.sop}</TableCell>\n                                                <TableCell>{Number(application.rating).toFixed(2)}</TableCell>\n\n                                                <TableCell><Link\n                                                    \n                                                    to=\"/dashboard\"\n                                                    style={{\n                                                        width: \"120px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"btn \"\n                                                >\n\n                                                    {application.status}\n                                                </Link></TableCell>\n                                                <TableCell><button\n                                                    onClick={() => this.reject(application._id, application.status)}\n                                                    style={{\n                                                        width: \"120px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"red btn\"\n                                                // className=\"btn blue\"\n                                                >\n\n                                                    reject\n                                                </button></TableCell>\n                                                <TableCell><button\n                                                    onClick={() => this.oneup(application._id, application.status, application.appId, ind)}\n                                                    style={{\n                                                        width: \"120px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"green btn\"\n                                                // className=\"btn blue\"\n                                                >\n\n                                                    {application.nextStatus}\n                                                </button></TableCell>\n                                                <TableCell><button\n                                                    onClick={() => this.download(application.appemail)}\n                                                    style={{\n                                                        width: \"120px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"green btn\"\n                                                // className=\"btn blue\"\n                                                >\n\n                                                   resume\n                                                </button></TableCell>\n                                            </TableRow>\n                                        ))\n                                    }\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nJobsList.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(\n    mapStateToProps,\n    { logoutUser }\n)(JobsList);\n","/home/fsociety/Downloads/New Folder/DASS/assignment_1/frontend/src/components/dashboard/MyEmployees.js",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235"],"\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { Link } from \"react-router-dom\";\n\nclass JobsList extends Component {\n    onLogoutClick = e => {\n        e.preventDefault();\n        this.props.logoutUser();\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            application: [],\n            sortedapplication: [],\n            sortName: true,\n            sortjobName: true,\n            sortjoinDate: true,\n            sortRating: true,\n            deadline: \"\",\n            maxApp: \"\",\n            numOfPositions: \"\"\n        };\n        this.renderIconName = this.renderIconName.bind(this);\n        this.renderIconjobName = this.renderIconjobName.bind(this);\n        this.renderIconjoinDate = this.renderIconjoinDate.bind(this);\n        this.renderIconRating = this.renderIconRating.bind(this);\n        this.sortChangeName = this.sortChangeName.bind(this);\n        this.sortChangejobName = this.sortChangejobName.bind(this);\n        this.sortChangejoinDate = this.sortChangejoinDate.bind(this);\n        this.sortChangeRating = this.sortChangeRating.bind(this);\n    }\n\n    async componentDidMount() {\n        const user = this.props.auth.user;\n        console.log(user.id);\n        const data = {\n            recId: user.id,\n        }\n        var appdata = [];\n        await axios.post('api/application/getrecappaccepted', data)\n            .then(response => {\n                console.log(response);\n                appdata.push(response.data)\n                console.log(appdata)\n                this.setState({ application: response.data, sortedapplication: response.data, searchText: '' });\n                // for(var i = 0; i<response.data.length; ++i){\n                // const data1 ={\n                //         appId: response.data[i].appId\n                //     }\n                //     axios.post('api/applicant/getprofile', data1)\n                //         .then( response1=>{ \n                //             appdata[0][i].name = response1.data[0].name;\n                //             appdata[0][i].skills = response1.data[0].skills;\n                //             appdata[0][i].education = response1.data[0].education;\n                //         })\n                //     }\n            })\n            .catch(function (error) {\n                console.log(error);\n                //  console.log(\"errorrrr\");\n            })\n        appdata = this.state.application;\n\n        console.log(appdata);\n        await this.setState({\n            application: appdata\n        })\n    }\n\n    async rate(appId, id, index) {\n        console.log(\"Ok\");\n        console.log(id);\n        var rate, jobrating;\n        if (!this.state.application[index].recRate) {\n\n            var rate = prompt('Enter a rating (0-5)');\n\n            if (isNaN(rate) == true || rate < 0 || rate > 5 || rate === null) {\n                alert('Invalid rating');\n            }\n\n            else {\n                if (rate !== null) {\n                    if (rate.length > 0) {\n                        const data = {\n                            appId: appId,\n                        }\n                        await axios.post('/api/applicant/getprofile', data)\n                            .then(response => {\n                                // console.log(\"Asd\")\n                                // console.log(response.data[0]);\n                                // console.log(\"Asd\")\n                                // console.log(rat)\n                                jobrating = response.data[0];\n\n\n                                jobrating.totalRating = Number(jobrating.totalRating) + Number(rate);\n                                jobrating.noOfRating = Number(jobrating.noOfRating) + Number(1);\n                                console.log(jobrating.noOfRating)\n                                jobrating.rating = Number(jobrating.totalRating) / Number(jobrating.noOfRating);\n                                console.log(jobrating)\n                            })\n                        const data1 = {\n                            appId: appId,\n                            rating: jobrating.rating,\n                            noOfRating: jobrating.noOfRating,\n                            totalRating: jobrating.totalRating\n                        }\n\n                        await axios.post('/api/applicant/updateapprating', data1)\n                            .then(res => (console.log(res.data)));\n\n                        const data2 = {\n                            applicationId: id,\n                            rating: jobrating.rating,\n\n                        }\n\n                        await axios.post('/api/application/updateapplicationrating', data2)\n                            .then(res => (console.log(res.data)));\n\n                        const data3 = {\n                            applicationId: this.state.application[index]._id,\n                            recRate: true\n                        }\n\n                        await axios.post('/api/application/updateapplicationrecratestatus', data3)\n                            .then(res => (console.log(res.data)));\n\n\n                        this.componentDidMount();\n                    } else {\n                        alert('Invalid rating');\n                    }\n                } else {\n                    alert('Invalid rating');\n                }\n            }\n\n        }\n        else {\n            alert(\"You have already Rated the employee\")\n        }\n    }\n\n    sortChangeName() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.application;\n        var flag = this.state.sortName;\n        array.sort(function (a, b) {\n            if (a.name != undefined && b.name != undefined) {\n                var str1 = a.name;\n                var str2 = b.name;\n                var n = str1.localeCompare(str2);\n                return (1 - flag * 2) * n;\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            application: array,\n            sortName: !this.state.sortName,\n        })\n    }\n    sortChangejobName() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.application;\n        var flag = this.state.sortjobName;\n        array.sort(function (a, b) {\n            if (a.jobName != undefined && b.jobName != undefined) {\n                var str1 = a.jobName;\n                var str2 = b.jobName;\n                var n = str1.localeCompare(str2);\n                return (1 - flag * 2) * n;\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            application: array,\n            sortjobName: !this.state.sortjobName,\n        })\n    }\n    sortChangejoinDate() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.application;\n        var flag = this.state.sortjoinDate;\n        array.sort(function (a, b) {\n            if (a.joinDate != undefined && b.joinDate != undefined) {\n                return (1 - flag * 2) * (new Date(a.joinDate) - new Date(b.joinDate));\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            application: array,\n            sortjoinDate: !this.state.sortjoinDate,\n        })\n    }\n\n\n\n    sortChangeRating() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.application;\n        var flag = this.state.sortRating;\n        array.sort(function (a, b) {\n            if (a.rating != undefined && b.rating != undefined) {\n                return (1 - flag * 2) * (new Date(a.rating) - new Date(b.rating));\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            application: array,\n            sortRating: !this.state.sortRating,\n        })\n    }\n\n    renderIconName() {\n        if (this.state.sortName) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n\n\n\n    renderIconjobName() {\n        if (this.state.sortjobName) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n\n    renderIconjoinDate() {\n        if (this.state.sortjoinDate) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n    renderIconRating() {\n        if (this.state.sortRating) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n\n    info(id) {\n\n    }\n\n\n\n    render() {\n        return (\n            <div >\n\n                <Grid container className=\"white\">\n\n\n                    <Grid item xs={12} md={9} lg={12}>\n                        <Paper>\n                            <Table size=\"medium\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell> Sr No.</TableCell>\n                                        <TableCell><Button onClick={this.sortChangeName}>{this.renderIconName()}</Button>Name</TableCell>\n\n                                        <TableCell><Button onClick={this.sortChangejoinDate}>{this.renderIconjoinDate()}</Button>Date of Joining</TableCell>\n                                        <TableCell><Button onClick={this.sortChangejobName}>{this.renderIconjobName()}</Button>Job Name</TableCell>\n                                        <TableCell>Type</TableCell>\n\n                                        <TableCell><Button onClick={this.sortChangeRating}>{this.renderIconRating()}</Button>Rating</TableCell>\n\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        this.state.application.map((application, ind) => (\n                                            <TableRow key={ind}>\n                                                <TableCell>{ind}</TableCell>\n                                                <TableCell>{application.name}</TableCell>\n                                                <TableCell>{application.joinDate.split(\"T\")[0]} {application.joinDate.split(\"T\")[1].split(\".\")[0]}</TableCell>\n\n\n\n                                                <TableCell>{application.jobName}</TableCell>\n                                                <TableCell>{application.type}</TableCell>\n                                                <TableCell>{Number(application.rating).toFixed(2)}</TableCell>\n\n                                                <TableCell><button\n                                                    onClick={() => this.rate(application.appId, application._id, ind)}\n                                                    style={{\n                                                        width: \"120px\",\n                                                        borderRadius: \"1.5px\",\n                                                        letterSpacing: \".75px\"\n                                                    }}\n                                                    className=\"blue btn\"\n                                                // className=\"btn blue\"\n                                                >\n\n                                                    rate\n                                                </button></TableCell>\n                                            </TableRow>\n                                        ))\n                                    }\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nJobsList.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(\n    mapStateToProps,\n    { logoutUser }\n)(JobsList);\n",{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"236","replacedBy":"240"},{"ruleId":"238","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":1,"column":28,"nodeType":"244","messageId":"245","endLine":1,"endColumn":36},{"ruleId":"242","severity":1,"message":"246","line":1,"column":38,"nodeType":"244","messageId":"245","endLine":1,"endColumn":46},{"ruleId":"242","severity":1,"message":"247","line":8,"column":8,"nodeType":"244","messageId":"245","endLine":8,"endColumn":17},{"ruleId":"248","severity":1,"message":"249","line":112,"column":23,"nodeType":"250","messageId":"251","endLine":112,"endColumn":25},{"ruleId":"248","severity":1,"message":"249","line":164,"column":24,"nodeType":"250","messageId":"251","endLine":164,"endColumn":26},{"ruleId":"252","severity":1,"message":"253","line":151,"column":19,"nodeType":"254","endLine":151,"endColumn":27},{"ruleId":"242","severity":1,"message":"255","line":10,"column":8,"nodeType":"244","messageId":"245","endLine":10,"endColumn":22},{"ruleId":"242","severity":1,"message":"256","line":21,"column":7,"nodeType":"244","messageId":"245","endLine":21,"endColumn":16},{"ruleId":"242","severity":1,"message":"257","line":12,"column":8,"nodeType":"244","messageId":"245","endLine":12,"endColumn":14},{"ruleId":"242","severity":1,"message":"258","line":14,"column":8,"nodeType":"244","messageId":"245","endLine":14,"endColumn":12},{"ruleId":"242","severity":1,"message":"259","line":15,"column":8,"nodeType":"244","messageId":"245","endLine":15,"endColumn":16},{"ruleId":"242","severity":1,"message":"260","line":16,"column":8,"nodeType":"244","messageId":"245","endLine":16,"endColumn":15},{"ruleId":"242","severity":1,"message":"261","line":17,"column":8,"nodeType":"244","messageId":"245","endLine":17,"endColumn":20},{"ruleId":"242","severity":1,"message":"262","line":18,"column":8,"nodeType":"244","messageId":"245","endLine":18,"endColumn":18},{"ruleId":"242","severity":1,"message":"263","line":19,"column":8,"nodeType":"244","messageId":"245","endLine":19,"endColumn":22},{"ruleId":"242","severity":1,"message":"264","line":23,"column":8,"nodeType":"244","messageId":"245","endLine":23,"endColumn":18},{"ruleId":"242","severity":1,"message":"265","line":24,"column":8,"nodeType":"244","messageId":"245","endLine":24,"endColumn":23},{"ruleId":"242","severity":1,"message":"266","line":25,"column":8,"nodeType":"244","messageId":"245","endLine":25,"endColumn":25},{"ruleId":"267","severity":1,"message":"268","line":90,"column":18,"nodeType":"244","messageId":"269","endLine":90,"endColumn":19},{"ruleId":"242","severity":1,"message":"270","line":2,"column":10,"nodeType":"244","messageId":"245","endLine":2,"endColumn":14},{"ruleId":"242","severity":1,"message":"271","line":5,"column":10,"nodeType":"244","messageId":"245","endLine":5,"endColumn":20},{"ruleId":"242","severity":1,"message":"272","line":15,"column":5,"nodeType":"244","messageId":"245","endLine":15,"endColumn":9},{"ruleId":"252","severity":1,"message":"253","line":123,"column":37,"nodeType":"254","endLine":123,"endColumn":45},{"ruleId":"273","severity":1,"message":"274","line":66,"column":21,"nodeType":"275","endLine":66,"endColumn":128},{"ruleId":"276","severity":1,"message":"277","line":90,"column":23,"nodeType":"278","messageId":"279","endLine":100,"endColumn":18},{"ruleId":"276","severity":1,"message":"280","line":102,"column":23,"nodeType":"278","messageId":"279","endLine":117,"endColumn":18},{"ruleId":"267","severity":1,"message":"268","line":128,"column":18,"nodeType":"244","messageId":"269","endLine":128,"endColumn":19},{"ruleId":"248","severity":1,"message":"281","line":164,"column":102,"nodeType":"250","messageId":"251","endLine":164,"endColumn":104},{"ruleId":"248","severity":1,"message":"249","line":302,"column":45,"nodeType":"250","messageId":"251","endLine":302,"endColumn":47},{"ruleId":"248","severity":1,"message":"281","line":346,"column":28,"nodeType":"250","messageId":"251","endLine":346,"endColumn":30},{"ruleId":"248","severity":1,"message":"281","line":346,"column":55,"nodeType":"250","messageId":"251","endLine":346,"endColumn":57},{"ruleId":"248","severity":1,"message":"281","line":380,"column":26,"nodeType":"250","messageId":"251","endLine":380,"endColumn":28},{"ruleId":"248","severity":1,"message":"281","line":380,"column":51,"nodeType":"250","messageId":"251","endLine":380,"endColumn":53},{"ruleId":"248","severity":1,"message":"281","line":414,"column":26,"nodeType":"250","messageId":"251","endLine":414,"endColumn":28},{"ruleId":"248","severity":1,"message":"281","line":414,"column":51,"nodeType":"250","messageId":"251","endLine":414,"endColumn":53},{"ruleId":"248","severity":1,"message":"281","line":445,"column":28,"nodeType":"250","messageId":"251","endLine":445,"endColumn":30},{"ruleId":"248","severity":1,"message":"281","line":445,"column":55,"nodeType":"250","messageId":"251","endLine":445,"endColumn":57},{"ruleId":"242","severity":1,"message":"270","line":2,"column":10,"nodeType":"244","messageId":"245","endLine":2,"endColumn":14},{"ruleId":"242","severity":1,"message":"271","line":5,"column":10,"nodeType":"244","messageId":"245","endLine":5,"endColumn":20},{"ruleId":"242","severity":1,"message":"247","line":7,"column":8,"nodeType":"244","messageId":"245","endLine":7,"endColumn":17},{"ruleId":"242","severity":1,"message":"272","line":15,"column":5,"nodeType":"244","messageId":"245","endLine":15,"endColumn":9},{"ruleId":"248","severity":1,"message":"249","line":100,"column":27,"nodeType":"250","messageId":"251","endLine":100,"endColumn":29},{"ruleId":"248","severity":1,"message":"249","line":152,"column":28,"nodeType":"250","messageId":"251","endLine":152,"endColumn":30},{"ruleId":"242","severity":1,"message":"257","line":10,"column":8,"nodeType":"244","messageId":"245","endLine":10,"endColumn":14},{"ruleId":"242","severity":1,"message":"247","line":11,"column":8,"nodeType":"244","messageId":"245","endLine":11,"endColumn":17},{"ruleId":"242","severity":1,"message":"258","line":12,"column":8,"nodeType":"244","messageId":"245","endLine":12,"endColumn":12},{"ruleId":"242","severity":1,"message":"259","line":13,"column":8,"nodeType":"244","messageId":"245","endLine":13,"endColumn":16},{"ruleId":"242","severity":1,"message":"260","line":14,"column":8,"nodeType":"244","messageId":"245","endLine":14,"endColumn":15},{"ruleId":"242","severity":1,"message":"261","line":15,"column":8,"nodeType":"244","messageId":"245","endLine":15,"endColumn":20},{"ruleId":"242","severity":1,"message":"262","line":16,"column":8,"nodeType":"244","messageId":"245","endLine":16,"endColumn":18},{"ruleId":"242","severity":1,"message":"263","line":17,"column":8,"nodeType":"244","messageId":"245","endLine":17,"endColumn":22},{"ruleId":"242","severity":1,"message":"264","line":21,"column":8,"nodeType":"244","messageId":"245","endLine":21,"endColumn":18},{"ruleId":"242","severity":1,"message":"265","line":22,"column":8,"nodeType":"244","messageId":"245","endLine":22,"endColumn":23},{"ruleId":"242","severity":1,"message":"266","line":23,"column":8,"nodeType":"244","messageId":"245","endLine":23,"endColumn":25},{"ruleId":"242","severity":1,"message":"270","line":24,"column":10,"nodeType":"244","messageId":"245","endLine":24,"endColumn":14},{"ruleId":"242","severity":1,"message":"282","line":25,"column":8,"nodeType":"244","messageId":"245","endLine":25,"endColumn":12},{"ruleId":"267","severity":1,"message":"283","line":128,"column":17,"nodeType":"244","messageId":"269","endLine":128,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":130,"column":29,"nodeType":"250","messageId":"251","endLine":130,"endColumn":31},{"ruleId":"242","severity":1,"message":"247","line":13,"column":8,"nodeType":"244","messageId":"245","endLine":13,"endColumn":17},{"ruleId":"242","severity":1,"message":"258","line":14,"column":8,"nodeType":"244","messageId":"245","endLine":14,"endColumn":12},{"ruleId":"242","severity":1,"message":"259","line":15,"column":8,"nodeType":"244","messageId":"245","endLine":15,"endColumn":16},{"ruleId":"242","severity":1,"message":"260","line":16,"column":8,"nodeType":"244","messageId":"245","endLine":16,"endColumn":15},{"ruleId":"242","severity":1,"message":"261","line":17,"column":8,"nodeType":"244","messageId":"245","endLine":17,"endColumn":20},{"ruleId":"242","severity":1,"message":"262","line":18,"column":8,"nodeType":"244","messageId":"245","endLine":18,"endColumn":18},{"ruleId":"242","severity":1,"message":"263","line":19,"column":8,"nodeType":"244","messageId":"245","endLine":19,"endColumn":22},{"ruleId":"242","severity":1,"message":"264","line":23,"column":8,"nodeType":"244","messageId":"245","endLine":23,"endColumn":18},{"ruleId":"284","severity":1,"message":"285","line":102,"column":54,"nodeType":"250","messageId":"286","endLine":102,"endColumn":55},{"ruleId":"284","severity":1,"message":"285","line":102,"column":60,"nodeType":"250","messageId":"286","endLine":102,"endColumn":61},{"ruleId":"267","severity":1,"message":"287","line":104,"column":22,"nodeType":"244","messageId":"269","endLine":104,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":105,"column":47,"nodeType":"250","messageId":"286","endLine":105,"endColumn":48},{"ruleId":"284","severity":1,"message":"285","line":105,"column":53,"nodeType":"250","messageId":"286","endLine":105,"endColumn":54},{"ruleId":"267","severity":1,"message":"287","line":107,"column":22,"nodeType":"244","messageId":"269","endLine":107,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":108,"column":50,"nodeType":"250","messageId":"286","endLine":108,"endColumn":51},{"ruleId":"284","severity":1,"message":"285","line":108,"column":56,"nodeType":"250","messageId":"286","endLine":108,"endColumn":57},{"ruleId":"267","severity":1,"message":"287","line":110,"column":22,"nodeType":"244","messageId":"269","endLine":110,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":111,"column":48,"nodeType":"250","messageId":"286","endLine":111,"endColumn":49},{"ruleId":"284","severity":1,"message":"285","line":111,"column":54,"nodeType":"250","messageId":"286","endLine":111,"endColumn":55},{"ruleId":"267","severity":1,"message":"268","line":114,"column":18,"nodeType":"244","messageId":"269","endLine":114,"endColumn":19},{"ruleId":"248","severity":1,"message":"249","line":115,"column":35,"nodeType":"250","messageId":"251","endLine":115,"endColumn":37},{"ruleId":"248","severity":1,"message":"249","line":118,"column":35,"nodeType":"250","messageId":"251","endLine":118,"endColumn":37},{"ruleId":"248","severity":1,"message":"281","line":144,"column":24,"nodeType":"250","messageId":"251","endLine":144,"endColumn":26},{"ruleId":"248","severity":1,"message":"281","line":144,"column":47,"nodeType":"250","messageId":"251","endLine":144,"endColumn":49},{"ruleId":"248","severity":1,"message":"281","line":166,"column":37,"nodeType":"250","messageId":"251","endLine":166,"endColumn":39},{"ruleId":"248","severity":1,"message":"281","line":166,"column":73,"nodeType":"250","messageId":"251","endLine":166,"endColumn":75},{"ruleId":"248","severity":1,"message":"281","line":295,"column":26,"nodeType":"250","messageId":"251","endLine":295,"endColumn":28},{"ruleId":"248","severity":1,"message":"281","line":295,"column":51,"nodeType":"250","messageId":"251","endLine":295,"endColumn":53},{"ruleId":"242","severity":1,"message":"247","line":13,"column":8,"nodeType":"244","messageId":"245","endLine":13,"endColumn":17},{"ruleId":"242","severity":1,"message":"258","line":14,"column":8,"nodeType":"244","messageId":"245","endLine":14,"endColumn":12},{"ruleId":"242","severity":1,"message":"259","line":15,"column":8,"nodeType":"244","messageId":"245","endLine":15,"endColumn":16},{"ruleId":"242","severity":1,"message":"260","line":16,"column":8,"nodeType":"244","messageId":"245","endLine":16,"endColumn":15},{"ruleId":"242","severity":1,"message":"261","line":17,"column":8,"nodeType":"244","messageId":"245","endLine":17,"endColumn":20},{"ruleId":"242","severity":1,"message":"262","line":18,"column":8,"nodeType":"244","messageId":"245","endLine":18,"endColumn":18},{"ruleId":"242","severity":1,"message":"263","line":19,"column":8,"nodeType":"244","messageId":"245","endLine":19,"endColumn":22},{"ruleId":"242","severity":1,"message":"264","line":23,"column":8,"nodeType":"244","messageId":"245","endLine":23,"endColumn":18},{"ruleId":"242","severity":1,"message":"270","line":26,"column":10,"nodeType":"244","messageId":"245","endLine":26,"endColumn":14},{"ruleId":"267","severity":1,"message":"283","line":100,"column":17,"nodeType":"244","messageId":"269","endLine":100,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":102,"column":29,"nodeType":"250","messageId":"251","endLine":102,"endColumn":31},{"ruleId":"248","severity":1,"message":"281","line":177,"column":24,"nodeType":"250","messageId":"251","endLine":177,"endColumn":26},{"ruleId":"248","severity":1,"message":"281","line":177,"column":47,"nodeType":"250","messageId":"251","endLine":177,"endColumn":49},{"ruleId":"248","severity":1,"message":"281","line":199,"column":27,"nodeType":"250","messageId":"251","endLine":199,"endColumn":29},{"ruleId":"248","severity":1,"message":"281","line":199,"column":53,"nodeType":"250","messageId":"251","endLine":199,"endColumn":55},{"ruleId":"248","severity":1,"message":"281","line":221,"column":28,"nodeType":"250","messageId":"251","endLine":221,"endColumn":30},{"ruleId":"248","severity":1,"message":"281","line":221,"column":55,"nodeType":"250","messageId":"251","endLine":221,"endColumn":57},{"ruleId":"248","severity":1,"message":"281","line":243,"column":26,"nodeType":"250","messageId":"251","endLine":243,"endColumn":28},{"ruleId":"248","severity":1,"message":"281","line":243,"column":51,"nodeType":"250","messageId":"251","endLine":243,"endColumn":53},"no-native-reassign",["288"],"no-negated-in-lhs",["289"],["288"],["289"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'TextField' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'DateTimePicker' is defined but never used.","'useStyles' is assigned a value but never used.","'Button' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.","'Autocomplete' is defined but never used.","'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'SearchIcon' is defined but never used.","'ArrowUpwardIcon' is defined but never used.","'ArrowDownwardIcon' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","'Link' is defined but never used.","'logoutUser' is defined but never used.","'user' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'curr_sel', 'curr_app', 'curr_app', 'curr_sel'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'i', 'i', 'curr_app', 'i', 'curr_sel', 'i', 'i'.","Expected '!==' and instead saw '!='.","'Fuse' is defined but never used.","'rate' is already defined.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'j' is already defined.","no-global-assign","no-unsafe-negation"]